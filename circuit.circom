pragma circom 2.0.0;

template MiMC5() {
    signal input x;
    signal input k;
    signal output h;

    var nRounds = 10;

    var c[nRounds] = [
        0,
        77310615943443375567436084442107622232145055201541928405394151478187506201408,
        20553232646172458240592788296289199722367030124996640758525783485190925759787,
        98426355470126352854469128058752364500238484454682447557325210675368584609920,
        86693133597791303390717240436226686119094409248771540785019086668896961841922,
        17532459988931442351778141368487528699757946395272710428032234776340571056363,
        76845698201037701069440321372832521400275680017816331181960797528975898115485,
        61288487847774308586273330009074733938426105197933839379007790610011954637607,
        73168810476861331354610947533160947613291635875902891173983183574477599153731,
        94369958587351409833338951097270172522318086067026116552490895225303120866172
    ];

    signal lastOutput[nRounds + 1];
    var base[nRounds];
    signal base2[nRounds];
    signal base4[nRounds];

    lastOutput[0] <== x;

    for(var i = 0; i < nRounds; i++){
        base[i] = lastOutput[i] + k + c[i];
        base2[i] <== base[i] * base[i];
        base4[i] <== base2[i] * base2[i];

        lastOutput[i + 1] <== base4[i] * base[i];
    }

    h <== lastOutput[nRounds] + k;
}

component main = MiMC5();